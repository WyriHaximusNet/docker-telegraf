name: Docker Image
env:
  DOCKER_IMAGE: wyrihaximusnet/telegraf
  DOCKER_IMAGE_REGISTRIES_SECRET_MAPPING: '{"ghcr.io":"GHCR_TOKEN","docker.io":"HUB_PASSCODE"}'
on:
  push:
    branches:
      - master
  schedule:
    - cron:  '59 23 * * 0'
jobs:
  registry-matrix:
    name: Extract registries from registry secret mapping
    runs-on: ubuntu-latest
    outputs:
      registry: ${{ steps.registry-matrix.outputs.registry }}
    steps:
      - uses: actions/checkout@v1
      - id: registry-matrix
        name: Extract registries from registry secret mapping
        run: |
          echo "::set-output name=registry::$(printenv DOCKER_IMAGE_REGISTRIES_SECRET_MAPPING | jq -c 'keys')"
  lint-dockerfile:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - name: Lint Dockerfile
        uses: docker://hadolint/hadolint:latest-debian
        with:
          entrypoint: hadolint
          args: Dockerfile
  build-docker-image:
    needs:
      - lint-dockerfile
    runs-on: ubuntu-latest
    strategy:
      matrix:
        telegraf: ['1.12', '1.14']
    steps:
      - uses: actions/checkout@v1
      - run: docker image build --build-arg BUILD_DATE=`date -u +"%Y-%m-%dT%H:%M:%SZ"` --build-arg VCS_REF=`git rev-parse --short HEAD` -t "${DOCKER_IMAGE}:${{ matrix.telegraf }}" . --no-cache --build-arg VERSION=${{ matrix.telegraf }}
      - run: mkdir ./docker-image
      - run: docker save "${DOCKER_IMAGE}:${{ matrix.telegraf }}" -o ./docker-image/docker_image.tar
      - uses: actions/upload-artifact@master
        with:
          name: docker-image-${{ matrix.telegraf }}
          path: ./docker-image
  scan-vulnerability:
    needs: build-docker-image
    runs-on: ubuntu-latest
    strategy:
      matrix:
        telegraf: ['1.12', '1.14']
    steps:
      - uses: actions/checkout@v1
      - name: Install clair-scanner
        run: |
          sudo curl -L https://github.com/arminc/clair-scanner/releases/download/v8/clair-scanner_linux_amd64 -o /usr/local/bin/clair-scanner
          sudo chmod +x /usr/local/bin/clair-scanner
      - uses: actions/download-artifact@master
        with:
          name: docker-image-${{ matrix.telegraf }}
          path: ./docker-image
      - run: docker load --input ./docker-image/docker_image.tar
      - run: rm -Rf ./docker-image/
      - run: mkdir -p "./clair/${DOCKER_IMAGE}"
      - run: docker-compose -f .docker/security/docker-compose.yml -p clair-ci up -d
#      - run: RETRIES=0 && while ! wget -T 10 -q -O /dev/null http://localhost:6060/v1/namespaces ; do sleep 1 ; echo -n "." ; if [ $${RETRIES} -eq 10 ] ; then echo " Timeout, aborting." ; exit 1 ; fi ; RETRIES=$$(($${RETRIES}+1)) ; done
      - run: sleep 10
      - run: echo -e "${DOCKER_IMAGE}:${{ matrix.telegraf }}" | xargs -I % sh -c 'clair-scanner --ip 172.17.0.1 -r "./clair/%.json" -l ./clair/clair.log % || (echo "% is vulnerable" && exit 1)'
      - run: docker-compose -f .docker/security/docker-compose.yml -p clair-ci down
  push-image:
    needs:
      - scan-vulnerability
      - registry-matrix
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        registry: ${{ fromJson(needs.registry-matrix.outputs.registry) }}
        telegraf: ['1.12', '1.14']
    steps:
      - uses: actions/download-artifact@master
        with:
          name: docker-image-${{ matrix.telegraf }}
          path: ./docker-image
      - run: docker load --input ./docker-image/docker_image.tar
      - run: rm -Rf ./docker-image/
      - name: Login to Docker Hub
        run: |
          echo "${{ env.DOCKER_PASSWORD }}" | \
          docker login ${{ matrix.registry }} \
            --username "${{ env.DOCKER_USER }}" \
            --password-stdin
        env:
          DOCKER_USER: ${{ secrets.HUB_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets[fromJson(env.DOCKER_IMAGE_REGISTRIES_SECRET_MAPPING)[matrix.registry]] }}
      - name: Docker info
        run: docker info
      - run: docker tag ${DOCKER_IMAGE}:${{ matrix.telegraf }} ${{ matrix.registry }}/${DOCKER_IMAGE}:${{ matrix.telegraf }}
      - name: Echo full tag
        run: echo -e "${{ matrix.registry }}/${DOCKER_IMAGE}:${{ matrix.telegraf }}"
      - name: Push image to Docker Hub
        run: docker push "${{ matrix.registry }}/${DOCKER_IMAGE}:${{ matrix.telegraf }}"
